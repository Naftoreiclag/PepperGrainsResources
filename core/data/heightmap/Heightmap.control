#version 400
layout(vertices = 4) out;

in vec3 vPosition[];
out vec3 cPosition[];

uniform float levelInner;
uniform float levelOuter;

uniform mat4 uModel;

uniform vec3 uCamPos;
uniform float uMinDist;
uniform float uMaxDist;
uniform float uMinTess;
uniform float uMaxTess;

vec3 normalSpace(vec3 vert) {
    vec4 ret = uModel * vec4(vert, 1.0);
    return ret.xyz;
}

float tessLevel(vec3 a, vec3 b) {
    float dist = distance(uCamPos, (a + b) / 2);
    return uMaxTess - (clamp((dist - uMinDist) / uMaxDist, 0.0, 1.0) * (uMaxTess - uMinTess));
}

void main() {
    cPosition[gl_InvocationID] = vPosition[gl_InvocationID];
    
    // Only once, hopefully
    if(gl_InvocationID == 0) {
    
        /*  o---------------> x
         *  |        0
         *  |   A----<----D 
         *  |   |    0    |
         *  |   |    0    |
         *  | 1 v1111+1111^ 3
         *  |   |    0    |
         *  |   |    0    |
         *  |   B---->----C
         *  v        2
         *  z
         */
        
        vec3 vA = normalSpace(vPosition[0]);
        vec3 vB = normalSpace(vPosition[1]);
        vec3 vC = normalSpace(vPosition[2]);
        vec3 vD = normalSpace(vPosition[3]);
        
        float lAB = tessLevel(vA, vB);
        float lBC = tessLevel(vB, vC);
        float lCD = tessLevel(vC, vD);
        float lDA = tessLevel(vD, vA);
    
        gl_TessLevelInner[0] = mix(lAB, lCD, 0.5);
        gl_TessLevelInner[1] = mix(lBC, lDA, 0.5);
        gl_TessLevelOuter[0] = lDA;
        gl_TessLevelOuter[1] = lAB;
        gl_TessLevelOuter[2] = lBC;
        gl_TessLevelOuter[3] = lCD;
    }
}
