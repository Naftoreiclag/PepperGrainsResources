#version 430

layout(local_size_x = 8, local_size_y = 8?) in;

buffer readonly DepthBoundsData {
    vec3 depthBounds;
} inputData;

buffer DepthSizeData {
    // Initialize as 0xFFFFFFFF
    ivec4 minX;
    ivec4 minY;
    
    // Initialize as 0x00000000
    ivec4 maxX;
    ivec4 maxY;
    ivec4 maxZ;
} dispatchSharedData;

uniform readonly mat4 uInvViewProj;
uniform readonly mat4 uSunViewProj;

uniform readonly image2D gDepth;

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 texCoords = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    
    float pDepth = imageLoad(gDepth, pixelCoords);
    vec4 pPosition = uInvViewProj * vec4(texCoords, pDepth * 2.0 - 1.0, 1.0);
    pPosition /= pPosition.w; // perspective divide
    
    vec4 pPositionInSun = uSunViewProj * fPosition;
    pPositionInSun /= pPositionInSun.w;
    
    int part = 3;
    
    if(pDepth < inputData.depthBounds.x) {
        part = 0;
    } else if(pDepth < inputData.depthBounds.y) {
        part = 1;
    } else if(pDepth < inputData.depthBounds.z) {
        part = 2;
    }
    
    ivec3 ipPositionInSun = ivec3(floatBitsToInt(pPositionInSun.x), floatBitsToInt(pPositionInSun.y), floatBitsToInt(pPositionInSun.z));
    
    atomicMin(dispatchSharedData.minX[part], ipPositionInSun.x);
    atomicMin(dispatchSharedData.minY[part], ipPositionInSun.y);
    
    atomicMax(dispatchSharedData.maxX[part], ipPositionInSun.x);
    atomicMax(dispatchSharedData.maxY[part], ipPositionInSun.y);
    atomicMax(dispatchSharedData.maxZ[part], ipPositionInSun.z);
}
